// Copyright 2014 The Cockroach Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the License for the specific language governing
// permissions and limitations under the License. See the AUTHORS file
// for names of contributors.
//
// Author: Spencer Kimball (spencer.kimball@gmail.com)

package proto;

import "config.proto";
import "data.proto";
import "errors.proto";
import "code.google.com/p/gogoprotobuf/gogoproto/gogo.proto";

// ClientCmdID provides a unique ID for client commands. Clients which
// provide ClientCmdID gain operation idempotence. In other words,
// clients can submit the same command multiple times and always
// receive the same response. This is common on retries over flaky
// networks. However, the system imposes a limit on how long
// idempotence is provided. Retries over an hour old are not
// guaranteed idempotence and may be executed more than once with
// potentially different results.
//
// ClientCmdID contains the client's timestamp and a client-generated
// random number. The client Timestamp is specified in unix
// nanoseconds and is used for some uniqueness but also to provide a
// rough ordering of requests, useful for data locality on the
// server. The Random is specified for additional uniqueness.
// NOTE: An accurate time signal IS NOT required for correctness.
message ClientCmdID {
  // Nanoseconds since Unix epoch.
  optional int64 wall_time = 1 [(gogoproto.nullable) = false];
  optional int64 random = 2 [(gogoproto.nullable) = false];
}

// RequestHeader is supplied with every storage node request.
message RequestHeader {
  // Timestamp specifies time at which read or writes should be
  // performed. If the timestamp is set to zero value, its value
  // is initialized to the wall time of the receiving node.
  optional Timestamp timestamp = 1 [(gogoproto.nullable) = false];
  // CmdID is optionally specified for request idempotence
  // (i.e. replay protection).
  optional ClientCmdID cmd_id = 2 [(gogoproto.nullable) = false, (gogoproto.customname) = "CmdID"];
  // The key for request. If the request operates on a range, this
  // represents the starting key for the range.
  optional bytes key = 3 [(gogoproto.nullable) = false, (gogoproto.customtype) = "Key"];
  // End key is empty if request spans only a single key.
  optional bytes end_key = 4 [(gogoproto.nullable) = false, (gogoproto.customtype) = "Key"];
  // User is the originating user. Used to lookup priority when
  // scheduling queued operations at target node.
  optional string user = 5 [(gogoproto.nullable) = false];
  // Replica specifies the destination for the request. This is a specific
  // instance of the available replicas belonging to RangeID.
  optional Replica replica = 6 [(gogoproto.nullable) = false];
  // RaftID specifies the ID of the Raft consensus group which the key
  // range belongs to. This is used by the receiving node to route the
  // request to the correct range.
  optional int64 raft_id = 7 [(gogoproto.nullable) = false, (gogoproto.customname) = "RaftID"];
  // UserPriority specifies priority multiple for non-transactional
  // commands. This value should be a positive integer [1, 2^31-1).
  // It's properly viewed as a multiple for how likely this
  // transaction will be to prevail if a write conflict occurs.
  // Commands with UserPriority=100 will be 100x less likely to be
  // aborted as conflicting transactions or non-transactional commands
  // with UserPriority=1. This value is ignored if Txn is
  // specified. If neither this value nor Txn is specified, the value
  // defaults to 1.
  optional int32 user_priority = 8 [default = 1];
  // Txn is set non-nil if a transaction is underway. To start a txn,
  // the first request should set this field to non-nil with name and
  // isolation level set as desired. The response will contain the
  // fully-initialized transaction with txn ID, priority, initial
  // timestamp, and maximum timestamp.
  optional Transaction txn = 9;
}

// ResponseHeader is returned with every storage node response.
message ResponseHeader {
  // Error is non-nil if an error occurred.
  optional Error error = 1;
  // Timestamp specifies time at which read or write actually was
  // performed. In the case of both reads and writes, if the timestamp
  // supplied to the request was 0, the wall time of the node
  // servicing the request will be set here. Additionally, in the case
  // of writes, this value may be increased from the timestamp passed
  // with the RequestHeader if the key being written was either read
  // or written more recently.
  optional Timestamp timestamp = 2 [(gogoproto.nullable) = false];
  // Transaction is non-nil if the request specified a non-nil
  // transaction. The transaction timestamp and/or priority may have
  // been updated, depending on the outcome of the request.
  optional Transaction txn = 3;
}

// A ContainsRequest is arguments to the Contains() method.
message ContainsRequest {
  optional RequestHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
}

// A ContainsResponse is the return value of the Contains() method.
message ContainsResponse {
  optional ResponseHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  optional bool exists = 2 [(gogoproto.nullable) = false];
}

// A GetRequest is arguments to the Get() method.
message GetRequest {
  optional RequestHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
}

// A GetResponse is the return value from the Get() method.
// If the key doesn't exist, returns nil for Value.Bytes.
message GetResponse {
  optional ResponseHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  optional Value value = 2;
}

// A PutRequest is arguments to the Put() method. Note that to write
// an empty value, the value parameter is still specified, but both
// Bytes and Integer are set to nil.
message PutRequest {
  optional RequestHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  optional Value value = 2 [(gogoproto.nullable) = false];
}

// A PutResponse is the return value from the Put() method.
message PutResponse {
  optional ResponseHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
}

// A ConditionalPutRequest is arguments to the ConditionalPut() method.
//
// - Returns true and sets value if ExpValue equals existing value.
// - If key doesn't exist and ExpValue is nil, sets value.
// - If key exists, but value is empty and ExpValue is not nil but empty, sets value.
// - Otherwise, returns error and the actual value of the key in the response.
message ConditionalPutRequest {
  optional RequestHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  // The value to put.
  optional Value value = 2 [(gogoproto.nullable) = false];
  // ExpValue.Bytes empty to test for non-existence. Specify as nil
  // to indicate there should be no existing entry. This is different
  // from the expectation that the value exists but is empty.
  optional Value exp_value = 3;
}

// A ConditionalPutResponse is the return value from the
// ConditionalPut() method.
message ConditionalPutResponse {
  optional ResponseHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  // ActualValue.Bytes set if conditional put failed.
  optional Value actual_value = 2;
}

// An IncrementRequest is arguments to the Increment() method. It
// increments the value for key, and returns the new value. If no
// value exists for a key, incrementing by 0 is not a noop, but will
// create a zero value. IncrementRequest cannot be called on a key set
// by Put() or ConditionalPut(). Similarly, Get(), Put() and
// ConditionalPut() cannot be invoked on an incremented key.
message IncrementRequest {
  optional RequestHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  optional int64 increment = 2 [(gogoproto.nullable) = false];
}

// An IncrementResponse is the return value from the Increment
// method. The new value after increment is specified in NewValue. If
// the value could not be decoded as specified, Error will be set.
message IncrementResponse {
  optional ResponseHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  optional int64 new_value = 2 [(gogoproto.nullable) = false];
}

// A DeleteRequest is arguments to the Delete() method.
message DeleteRequest {
  optional RequestHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
}

// A DeleteResponse is the return value from the Delete() method.
message DeleteResponse {
  optional ResponseHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
}

// A DeleteRangeRequest is arguments to the DeleteRange method. It
// specifies the range of keys to delete.
message DeleteRangeRequest {
  optional RequestHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  // If 0, *all* entries between Key (inclusive) and EndKey
  // (exclusive) are deleted. Must be >= 0
  optional int64 max_entries_to_delete = 2 [(gogoproto.nullable) = false];
}

// A DeleteRangeResponse is the return value from the DeleteRange()
// method.
message DeleteRangeResponse {
  optional ResponseHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  // Number of entries removed.
  optional int64 num_deleted = 2 [(gogoproto.nullable) = false];
}

// A ScanRequest is arguments to the Scan() method. It specifies the
// start and end keys for the scan and the maximum number of results.
message ScanRequest {
  optional RequestHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  // Must be > 0.
  optional int64 max_results = 2 [(gogoproto.nullable) = false];
}

// A ScanResponse is the return value from the Scan() method.
message ScanResponse {
  optional ResponseHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  // Empty if no rows were scanned.
  repeated KeyValue rows = 2 [(gogoproto.nullable) = false];
}

// An EndTransactionRequest is arguments to the EndTransaction() method.
// It specifies whether to commit or roll back an extant transaction.
message EndTransactionRequest {
  optional RequestHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  // False to abort and rollback.
  optional bool commit = 2 [(gogoproto.nullable) = false];

  // Optional commit triggers. Note that commit triggers are for
  // internal use only and will be ignored if requested through the
  // public-facing KV API.
  optional SplitTrigger split_trigger = 3;
}

// An EndTransactionResponse is the return value from the
// EndTransaction() method. The final transaction record is returned
// as part of the response header. In particular, transaction status
// and timestamp will be updated to reflect final committed
// values. Clients may propagate the transaction timestamp as the
// final txn commit timestamp in order to preserve causal ordering
// between subsequent transactions. CommitWait specifies the commit
// wait, which is the remaining time the client MUST wait before
// signalling completion of the transaction to another distributed
// node to maintain consistency.
message EndTransactionResponse {
  optional ResponseHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  // Remaining time (ns).
  optional int64 commit_wait = 2 [(gogoproto.nullable) = false];
}

// A ReapQueueRequest is arguments to the ReapQueue() method. It
// specifies the recipient inbox key to which messages are waiting
// to be reapted and also the maximum number of results to return.
message ReapQueueRequest {
  optional RequestHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  // Maximum results to return; must be > 0.
  optional int64 max_results = 2 [(gogoproto.nullable) = false];
}

// A ReapQueueResponse is the return value from the ReapQueue() method.
message ReapQueueResponse {
  optional ResponseHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  repeated Value messages = 2 [(gogoproto.nullable) = false];
}

// An EnqueueUpdateRequest is arguments to the EnqueueUpdate() method.
// It specifies the update to enqueue for asynchronous execution.
// Update is an instance of one of the following messages: PutRequest,
// IncrementRequest, DeleteRequest, DeleteRangeRequest, or
// AccountingRequest.
message EnqueueUpdateRequest {
  optional RequestHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  // TODO(spencer): add union type here.
}

// An EnqueueUpdateResponse is the return value from the
// EnqueueUpdate() method.
message EnqueueUpdateResponse {
  optional ResponseHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
}

// An EnqueueMessageRequest is arguments to the EnqueueMessage() method.
// It specifies the recipient inbox key and the message (an arbitrary
// byte slice value).
message EnqueueMessageRequest {
  optional RequestHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  // Message value to delivery to inbox.
  optional Value msg = 2 [(gogoproto.nullable) = false];
}

// An EnqueueMessageResponse is the return value from the
// EnqueueMessage() method.
message EnqueueMessageResponse {
  optional ResponseHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
}

// A RequestUnion contains exactly one of the optional requests.
message RequestUnion {
  option (gogoproto.onlyone) = true;
  optional ContainsRequest contains = 1;
  optional GetRequest get = 2;
  optional PutRequest put = 3;
  optional ConditionalPutRequest conditional_put = 4;
  optional IncrementRequest increment = 5;
  optional DeleteRequest delete = 6;
  optional DeleteRangeRequest delete_range = 7;
  optional ScanRequest scan = 8;
  optional EndTransactionRequest end_transaction = 9;
  optional ReapQueueRequest reap_queue = 10;
  optional EnqueueUpdateRequest enqueue_update = 11;
  optional EnqueueMessageRequest enqueue_message = 12;
}

// A ResponseUnion contains exactly one of the optional responses.
message ResponseUnion {
  option (gogoproto.onlyone) = true;
  optional ContainsResponse contains = 1;
  optional GetResponse get = 2;
  optional PutResponse put = 3;
  optional ConditionalPutResponse conditional_put = 4;
  optional IncrementResponse increment = 5;
  optional DeleteResponse delete = 6;
  optional DeleteRangeResponse delete_range = 7;
  optional ScanResponse scan = 8;
  optional EndTransactionResponse end_transaction = 9;
  optional ReapQueueResponse reap_queue = 10;
  optional EnqueueUpdateResponse enqueue_update = 11;
  optional EnqueueMessageResponse enqueue_message = 12;
}

// A BatchRequest contains one or more requests to be executed in
// parallel, or if applicable (based on write-only commands and
// range-locality), as a single update.
message BatchRequest {
  optional RequestHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  repeated RequestUnion requests = 2 [(gogoproto.nullable) = false];
}

// A BatchResponse contains one or more responses, one per request
// corresponding to the requests in the matching BatchRequest. The
// error in the response header is set to the first error from the
// slice of responses, if applicable.
message BatchResponse {
  optional ResponseHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  repeated ResponseUnion responses = 2 [(gogoproto.nullable) = false];
}

// An AdminSplitRequest is arguments to the AdminSplit() method. The
// existing range which contains RequestHeader.Key is split by
// split_key. If split_key is not specified, then this method will
// determine a split key that is roughly halfway through the
// range. The existing range is resized to cover only its start key to
// the split key. The new range created by the split starts at the
// split key and extends to the original range's end key. If split_key
// is known, header.key should also be set to split_key.
//
// New range IDs for each of the split range's replica and a new Raft
// ID are generated by the operation. Split requests are done in the
// context of a distributed transaction which updates range addressing
// records, range metadata and finally, provides a commit trigger to
// update bookkeeping and instantiate the new range on commit.
//
// The new range contains range replicas located on the same stores;
// no range data is moved during this operation. The split can be
// thought of as a mostly logical operation, though some other
// metadata (e.g. response cache and range stats must be copied or
// recomputed).
message AdminSplitRequest {
  optional RequestHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  optional bytes split_key = 2 [(gogoproto.nullable) = false, (gogoproto.customtype) = "Key"];
}

// An AdminSplitResponse is the return value from the AdminSplit()
// method.
message AdminSplitResponse {
  optional ResponseHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
}
