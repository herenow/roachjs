// Copyright 2014 The Cockroach Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the License for the specific language governing
// permissions and limitations under the License. See the AUTHORS file
// for names of contributors.
//
// Author: Spencer Kimball (spencer.kimball@gmail.com)

package proto;

import "code.google.com/p/gogoprotobuf/gogoproto/gogo.proto";

message Addr {
  optional string network = 1 [(gogoproto.nullable) = false];
  optional string address = 2 [(gogoproto.nullable) = false];
}

// GossipRequest is the request struct passed with the Gossip RPC.
message GossipRequest {
  // Address of requesting node's server.
  optional Addr addr = 1 [(gogoproto.nullable) = false];
  // Local address of client on requesting node.
  optional Addr l_addr = 2 [(gogoproto.nullable) = false];
  // Maximum sequence number of gossip from this peer.
  optional int64 max_seq = 3 [(gogoproto.nullable) = false];
  // Reciprocal delta of new info since last gossip.
  optional bytes delta = 4 [(gogoproto.nullable) = false];
}

// GossipResponse is returned from the Gossip.Gossip RPC.
// Delta will be nil in the event that Alternate is set.
message GossipResponse {
  // Requested delta of server's infostore.
  optional bytes delta = 1 [(gogoproto.nullable) = false];
  // Non-nil means client should retry with this address.
  optional Addr alternate = 2;
}
