// Copyright 2014 The Cockroach Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the License for the specific language governing
// permissions and limitations under the License. See the AUTHORS file
// for names of contributors.
//
// Author: Spencer Kimball (spencer.kimball@gmail.com)

package proto;

import "config.proto";
import "data.proto";
import "code.google.com/p/gogoprotobuf/gogoproto/gogo.proto";

// A GenericError is a generic representation of a go error including
// the string message and whether or not the error is retryable.
message GenericError {
  optional string message = 1 [(gogoproto.nullable) = false];
  optional bool retryable = 2 [(gogoproto.nullable) = false];
}

// A NotLeaderError indicates that the current range is not the
// leader. If the leader is known, its Replica is set in the error.
message NotLeaderError {
  optional Replica leader = 1 [(gogoproto.nullable) = false];
}

// A RangeNotFoundError indicates that a command was sent to a range
// which is not hosted on this store.
message RangeNotFoundError {
  optional int64 raft_id = 1 [(gogoproto.nullable) = false, (gogoproto.customname) = "RaftID"];
}

// A RangeKeyMismatchError indicates that a command was sent to a
// range which did not contain the key(s) specified by the command.
message RangeKeyMismatchError {
  optional bytes request_start_key = 1 [(gogoproto.nullable) = false, (gogoproto.customtype) = "Key"];
  optional bytes request_end_key = 2 [(gogoproto.nullable) = false, (gogoproto.customtype) = "Key"];
  optional RangeDescriptor range = 3;
}

// A ReadWithinUncertaintyIntervalError indicates that a read at timestamp
// encountered a versioned value at existing_timestamp within the uncertainty
// interval of the reader.
// The read should be retried at existing_timestamp+1.
message ReadWithinUncertaintyIntervalError {
  optional Timestamp timestamp = 1 [(gogoproto.nullable) = false];
  optional Timestamp existing_timestamp = 2 [(gogoproto.nullable) = false];
}

// A TransactionAbortedError indicates that the transaction was
// aborted by another concurrent transaction.
message TransactionAbortedError {
  optional Transaction txn = 1 [(gogoproto.nullable) = false];
}

// A TransactionPushError indicates that the transaction could not
// continu because it encountered a write intent from another
// transaction which it was unable to push.
message TransactionPushError {
  // txn can be null in the event the push error happened to a
  // non-transactional method.
  optional Transaction txn = 1;
  optional Transaction pushee_txn = 2 [(gogoproto.nullable) = false];
}

// A TransactionRetryError indicates that the transaction must be
// retried, usually with an increased transaction timestamp. The
// transaction struct to use is returned with the error.
message TransactionRetryError {
  optional Transaction txn = 1 [(gogoproto.nullable) = false];
}

// A TransactionStatusError indicates that the transaction status is
// incompatible with the requested operation. This might mean the
// transaction has already been committed. It might also be the case
// that the request to modify the transaction failed due to a
// regression in transaction epoch or timestamp, both of which may
// only monotonically increase.
message TransactionStatusError {
  optional Transaction txn = 1 [(gogoproto.nullable) = false];
  optional string msg = 2 [(gogoproto.nullable) = false];
}

// A WriteIntentError indicates that a write intent belonging to
// another transaction was encountered leading to a read/write or
// write/write conflict. The Key at which the intent was encountered
// is set, as is the Txn record for the intent's transaction.
// Resolved is set if the intent was successfully resolved, meaning
// the client may retry the operation immediately. If Resolved is
// false, the client should back off and retry.
message WriteIntentError {
  optional bytes key = 1 [(gogoproto.nullable) = false, (gogoproto.customtype) = "Key"];
  optional Transaction txn = 2 [(gogoproto.nullable) = false];
  optional bool resolved = 3 [(gogoproto.nullable) = false];
}

// A WriteTooOldError indicates that a write encountered a versioned
// value newer than its timestamp, making it impossible to rewrite
// history. The write should be retried at existing_timestamp+1.
message WriteTooOldError {
  optional Timestamp timestamp = 1 [(gogoproto.nullable) = false];
  optional Timestamp existing_timestamp = 2 [(gogoproto.nullable) = false];
}

// An OpRequiresTxnError indicates that a command required to be
// carried out in a transactional context but was not.
// For example, a Scan which spans ranges requires a transaction.
// The operation should be retried inside of a transaction.
message OpRequiresTxnError {
}


// Error is a union type containing all available errors.
// NOTE: new error types must be added here, and potentially in
// the two locations (*ResponseHeader).{,Set}GoError().
message Error {
  optional GenericError generic = 1;
  optional NotLeaderError not_leader = 2;
  optional RangeNotFoundError range_not_found = 3;
  optional RangeKeyMismatchError range_key_mismatch = 4;
  optional ReadWithinUncertaintyIntervalError read_within_uncertainty_interval = 5;
  optional TransactionAbortedError transaction_aborted = 6;
  optional TransactionPushError transaction_push = 7;
  optional TransactionRetryError transaction_retry = 8;
  optional TransactionStatusError transaction_status = 9;
  optional WriteIntentError write_intent = 10;
  optional WriteTooOldError write_too_old = 11;
  optional OpRequiresTxnError op_requires_txn = 12;
}
